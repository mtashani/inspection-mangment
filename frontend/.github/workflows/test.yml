name: Frontend Tests

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'frontend/**'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'frontend/**'

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci
      
    - name: Run linting
      working-directory: ./frontend
      run: npm run lint
      
    - name: Run type checking
      working-directory: ./frontend
      run: npx tsc --noEmit
      
    - name: Run unit tests
      working-directory: ./frontend
      run: npm run test:unit -- --coverage --watchAll=false
      
    - name: Run integration tests
      working-directory: ./frontend
      run: npm run test:integration -- --watchAll=false
      
    - name: Run E2E tests
      working-directory: ./frontend
      run: npm run test:e2e -- --watchAll=false
      
    - name: Upload coverage reports
      uses: codecov/codecov-action@v4
      with:
        file: ./frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage
        fail_ci_if_error: true
        
    - name: Build application
      working-directory: ./frontend
      run: npm run build
      
    - name: Build Storybook
      working-directory: ./frontend
      run: npm run build-storybook

  accessibility:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci
      
    - name: Build application
      working-directory: ./frontend
      run: npm run build
      
    - name: Start application
      working-directory: ./frontend
      run: npm start &
      
    - name: Wait for application
      run: npx wait-on http://localhost:3000
      
    - name: Run accessibility tests
      run: |
        npx @axe-core/cli http://localhost:3000 \
          --include-tags wcag2a,wcag2aa,wcag21aa \
          --exit
          
    - name: Run Lighthouse CI
      uses: treosh/lighthouse-ci-action@v10
      with:
        configPath: './frontend/lighthouserc.json'
        uploadArtifacts: true
        temporaryPublicStorage: true

  performance:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci
      
    - name: Build application
      working-directory: ./frontend
      run: npm run build
      
    - name: Analyze bundle size
      working-directory: ./frontend
      run: |
        npx next-bundle-analyzer
        
    - name: Check bundle size limits
      working-directory: ./frontend
      run: |
        npm install -g bundlesize
        bundlesize
        
  security:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci
      
    - name: Run security audit
      working-directory: ./frontend
      run: npm audit --audit-level=moderate
      
    - name: Run dependency check
      working-directory: ./frontend
      run: |
        npx depcheck
        
    - name: Check for known vulnerabilities
      working-directory: ./frontend
      run: |
        npx better-npm-audit audit --level moderate
        
  visual-regression:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci
      
    - name: Build Storybook
      working-directory: ./frontend
      run: npm run build-storybook
      
    - name: Run Chromatic
      working-directory: ./frontend
      run: npx chromatic --project-token=${{ secrets.CHROMATIC_PROJECT_TOKEN }}
      env:
        CHROMATIC_PROJECT_TOKEN: ${{ secrets.CHROMATIC_PROJECT_TOKEN }}
        
  notify:
    runs-on: ubuntu-latest
    needs: [test, accessibility, performance, security, visual-regression]
    if: always()
    
    steps:
    - name: Notify on success
      if: ${{ needs.test.result == 'success' && needs.accessibility.result == 'success' && needs.performance.result == 'success' && needs.security.result == 'success' }}
      run: |
        echo "All tests passed successfully! ✅"
        
    - name: Notify on failure
      if: ${{ needs.test.result == 'failure' || needs.accessibility.result == 'failure' || needs.performance.result == 'failure' || needs.security.result == 'failure' }}
      run: |
        echo "Some tests failed! ❌"
        exit 1