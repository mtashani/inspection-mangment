/**
 * Badge Component Tests
 * Tests enhanced badge component with theme variable integration
 */

import React from 'react'
import { render, screen } from '@testing-library/react'
import { Badge } from '../badge'

// Mock CSS variables for testing
const mockCSSVariables = {
  '--color-primary': '#2563eb',
  '--color-primary-content': '#ffffff',
  '--color-secondary': '#64748b',
  '--color-secondary-content': '#ffffff',
  '--color-accent': '#f59e0b',
  '--color-accent-content': '#ffffff',
  '--color-success': '#22c55e',
  '--color-success-content': '#ffffff',
  '--color-warning': '#f59e0b',
  '--color-warning-content': '#ffffff',
  '--color-error': '#ef4444',
  '--color-error-content': '#ffffff',
  '--color-info': '#3b82f6',
  '--color-info-content': '#ffffff',
  '--color-base-content': '#0f172a',
  '--color-base-200': '#f1f5f9',
  '--color-base-300': '#e2e8f0',
  '--radius-selector': '0.125rem',
  '--size-selector': '1.5rem'
}

// Mock getComputedStyle to return our CSS variables
Object.defineProperty(window, 'getComputedStyle', {
  value: () => ({
    getPropertyValue: (prop: string) => mockCSSVariables[prop as keyof typeof mockCSSVariables] || ''
  })
})

describe('Enhanced Badge Component', () => {
  describe('Basic Functionality', () => {
    test('renders badge with text', () => {
      render(<Badge>Badge Text</Badge>)
      
      expect(screen.getByText('Badge Text')).toBeInTheDocument()
    })
    
    test('applies custom className', () => {
      render(<Badge className="custom-badge-class">Custom Badge</Badge>)
      
      const badge = screen.getByText('Custom Badge')
      expect(badge).toHaveClass('custom-badge-class')
    })
    
    test('forwards ref correctly', () => {
      const ref = React.createRef<HTMLDivElement>()\n      \n      render(<Badge ref={ref}>Ref Badge</Badge>)\n      \n      expect(ref.current).toBeInstanceOf(HTMLDivElement)\n    })\n  })\n  \n  describe('Badge Variants', () => {\n    test('renders default variant', () => {\n      render(<Badge variant=\"default\">Default Badge</Badge>)\n      \n      const badge = screen.getByText('Default Badge')\n      expect(badge).toHaveClass('bg-[var(--color-primary)]')\n      expect(badge).toHaveClass('text-[var(--color-primary-content)]')\n    })\n    \n    test('renders secondary variant', () => {\n      render(<Badge variant=\"secondary\">Secondary Badge</Badge>)\n      \n      const badge = screen.getByText('Secondary Badge')\n      expect(badge).toHaveClass('bg-[var(--color-secondary)]')\n      expect(badge).toHaveClass('text-[var(--color-secondary-content)]')\n    })\n    \n    test('renders accent variant', () => {\n      render(<Badge variant=\"accent\">Accent Badge</Badge>)\n      \n      const badge = screen.getByText('Accent Badge')\n      expect(badge).toHaveClass('bg-[var(--color-accent)]')\n      expect(badge).toHaveClass('text-[var(--color-accent-content)]')\n    })\n    \n    test('renders success variant', () => {\n      render(<Badge variant=\"success\">Success Badge</Badge>)\n      \n      const badge = screen.getByText('Success Badge')\n      expect(badge).toHaveClass('bg-[var(--color-success)]')\n      expect(badge).toHaveClass('text-[var(--color-success-content)]')\n    })\n    \n    test('renders warning variant', () => {\n      render(<Badge variant=\"warning\">Warning Badge</Badge>)\n      \n      const badge = screen.getByText('Warning Badge')\n      expect(badge).toHaveClass('bg-[var(--color-warning)]')\n      expect(badge).toHaveClass('text-[var(--color-warning-content)]')\n    })\n    \n    test('renders error variant', () => {\n      render(<Badge variant=\"error\">Error Badge</Badge>)\n      \n      const badge = screen.getByText('Error Badge')\n      expect(badge).toHaveClass('bg-[var(--color-error)]')\n      expect(badge).toHaveClass('text-[var(--color-error-content)]')\n    })\n    \n    test('renders info variant', () => {\n      render(<Badge variant=\"info\">Info Badge</Badge>)\n      \n      const badge = screen.getByText('Info Badge')\n      expect(badge).toHaveClass('bg-[var(--color-info)]')\n      expect(badge).toHaveClass('text-[var(--color-info-content)]')\n    })\n    \n    test('renders outline variant', () => {\n      render(<Badge variant=\"outline\">Outline Badge</Badge>)\n      \n      const badge = screen.getByText('Outline Badge')\n      expect(badge).toHaveClass('border-[var(--color-base-300)]')\n      expect(badge).toHaveClass('text-[var(--color-base-content)]')\n    })\n    \n    test('renders ghost variant', () => {\n      render(<Badge variant=\"ghost\">Ghost Badge</Badge>)\n      \n      const badge = screen.getByText('Ghost Badge')\n      expect(badge).toHaveClass('bg-transparent')\n      expect(badge).toHaveClass('text-[var(--color-base-content)]')\n    })\n    \n    test('defaults to default variant when not specified', () => {\n      render(<Badge>No Variant</Badge>)\n      \n      const badge = screen.getByText('No Variant')\n      expect(badge).toHaveClass('bg-[var(--color-primary)]')\n    })\n  })\n  \n  describe('Theme Variable Integration', () => {\n    test('uses theme variables for border radius', () => {\n      render(<Badge>Radius Badge</Badge>)\n      \n      const badge = screen.getByText('Radius Badge')\n      expect(badge).toHaveClass('rounded-[var(--radius-selector)]')\n    })\n    \n    test('uses theme variables for sizing', () => {\n      render(<Badge>Size Badge</Badge>)\n      \n      const badge = screen.getByText('Size Badge')\n      expect(badge).toHaveClass('h-[var(--size-selector)]')\n    })\n    \n    test('uses semantic color pairs correctly', () => {\n      render(<Badge variant=\"success\">Color Pair</Badge>)\n      \n      const badge = screen.getByText('Color Pair')\n      expect(badge).toHaveClass('bg-[var(--color-success)]')\n      expect(badge).toHaveClass('text-[var(--color-success-content)]')\n    })\n  })\n  \n  describe('Size Variants', () => {\n    test('has consistent height using theme variable', () => {\n      render(<Badge>Consistent Height</Badge>)\n      \n      const badge = screen.getByText('Consistent Height')\n      expect(badge).toHaveClass('h-[var(--size-selector)]')\n    })\n    \n    test('has appropriate padding', () => {\n      render(<Badge>Padded Badge</Badge>)\n      \n      const badge = screen.getByText('Padded Badge')\n      expect(badge).toHaveClass('px-2.5')\n      expect(badge).toHaveClass('py-0.5')\n    })\n  })\n  \n  describe('Typography', () => {\n    test('has correct text styling', () => {\n      render(<Badge>Typography Badge</Badge>)\n      \n      const badge = screen.getByText('Typography Badge')\n      expect(badge).toHaveClass('text-xs')\n      expect(badge).toHaveClass('font-semibold')\n    })\n    \n    test('handles long text gracefully', () => {\n      const longText = 'This is a very long badge text that should be handled properly'\n      \n      render(<Badge>{longText}</Badge>)\n      \n      expect(screen.getByText(longText)).toBeInTheDocument()\n    })\n    \n    test('handles empty text', () => {\n      render(<Badge></Badge>)\n      \n      const badge = document.querySelector('.inline-flex')\n      expect(badge).toBeInTheDocument()\n    })\n  })\n  \n  describe('Accessibility', () => {\n    test('has proper semantic structure', () => {\n      render(<Badge>Accessible Badge</Badge>)\n      \n      const badge = screen.getByText('Accessible Badge')\n      expect(badge.tagName).toBe('DIV')\n    })\n    \n    test('supports aria-label', () => {\n      render(<Badge aria-label=\"Custom badge label\">Badge</Badge>)\n      \n      const badge = screen.getByLabelText('Custom badge label')\n      expect(badge).toBeInTheDocument()\n    })\n    \n    test('supports role attribute', () => {\n      render(<Badge role=\"status\">Status Badge</Badge>)\n      \n      const badge = screen.getByRole('status')\n      expect(badge).toBeInTheDocument()\n    })\n    \n    test('is readable with sufficient contrast', () => {\n      // Test that badge uses proper color pairs for contrast\n      render(<Badge variant=\"primary\">Contrast Badge</Badge>)\n      \n      const badge = screen.getByText('Contrast Badge')\n      expect(badge).toHaveClass('bg-[var(--color-primary)]')\n      expect(badge).toHaveClass('text-[var(--color-primary-content)]')\n    })\n  })\n  \n  describe('Interactive States', () => {\n    test('supports hover effects when interactive', () => {\n      render(\n        <Badge \n          className=\"cursor-pointer hover:opacity-80 transition-opacity\"\n          onClick={() => {}}\n        >\n          Interactive Badge\n        </Badge>\n      )\n      \n      const badge = screen.getByText('Interactive Badge')\n      expect(badge).toHaveClass('cursor-pointer')\n      expect(badge).toHaveClass('hover:opacity-80')\n    })\n    \n    test('can be made focusable', () => {\n      render(\n        <Badge tabIndex={0}>\n          Focusable Badge\n        </Badge>\n      )\n      \n      const badge = screen.getByText('Focusable Badge')\n      expect(badge).toHaveAttribute('tabIndex', '0')\n      \n      badge.focus()\n      expect(badge).toHaveFocus()\n    })\n  })\n  \n  describe('Content Flexibility', () => {\n    test('renders with icon content', () => {\n      const TestIcon = () => <span data-testid=\"test-icon\">🔥</span>\n      \n      render(\n        <Badge>\n          <TestIcon />\n          Icon Badge\n        </Badge>\n      )\n      \n      expect(screen.getByTestId('test-icon')).toBeInTheDocument()\n      expect(screen.getByText('Icon Badge')).toBeInTheDocument()\n    })\n    \n    test('renders icon-only badge', () => {\n      const TestIcon = () => <span data-testid=\"icon-only\">⭐</span>\n      \n      render(\n        <Badge aria-label=\"Star rating\">\n          <TestIcon />\n        </Badge>\n      )\n      \n      expect(screen.getByTestId('icon-only')).toBeInTheDocument()\n      expect(screen.getByLabelText('Star rating')).toBeInTheDocument()\n    })\n    \n    test('renders with number content', () => {\n      render(<Badge>42</Badge>)\n      \n      expect(screen.getByText('42')).toBeInTheDocument()\n    })\n    \n    test('renders with mixed content', () => {\n      render(\n        <Badge>\n          <span>Count: </span>\n          <strong>5</strong>\n        </Badge>\n      )\n      \n      expect(screen.getByText('Count:')).toBeInTheDocument()\n      expect(screen.getByText('5')).toBeInTheDocument()\n    })\n  })\n  \n  describe('Theme Switching', () => {\n    test('adapts to theme changes', () => {\n      const { rerender } = render(<Badge variant=\"success\">Theme Badge</Badge>)\n      \n      const badge = screen.getByText('Theme Badge')\n      expect(badge).toHaveClass('bg-[var(--color-success)]')\n      \n      // Simulate theme change\n      Object.defineProperty(window, 'getComputedStyle', {\n        value: () => ({\n          getPropertyValue: (prop: string) => {\n            if (prop === '--color-success') return '#10b981' // Different green\n            return mockCSSVariables[prop as keyof typeof mockCSSVariables] || ''\n          }\n        })\n      })\n      \n      rerender(<Badge variant=\"success\">Theme Badge</Badge>)\n      \n      // Badge should still use CSS variable\n      expect(badge).toHaveClass('bg-[var(--color-success)]')\n    })\n  })\n  \n  describe('Layout Integration', () => {\n    test('works well in flex layouts', () => {\n      render(\n        <div className=\"flex gap-2\">\n          <Badge>Badge 1</Badge>\n          <Badge>Badge 2</Badge>\n          <Badge>Badge 3</Badge>\n        </div>\n      )\n      \n      expect(screen.getByText('Badge 1')).toBeInTheDocument()\n      expect(screen.getByText('Badge 2')).toBeInTheDocument()\n      expect(screen.getByText('Badge 3')).toBeInTheDocument()\n    })\n    \n    test('maintains alignment in different contexts', () => {\n      render(\n        <div>\n          <p>\n            This is text with a <Badge>inline badge</Badge> in the middle.\n          </p>\n        </div>\n      )\n      \n      const badge = screen.getByText('inline badge')\n      expect(badge).toHaveClass('inline-flex')\n      expect(badge).toHaveClass('items-center')\n    })\n  })\n  \n  describe('Performance', () => {\n    test('does not re-render unnecessarily', () => {\n      const renderSpy = jest.fn()\n      \n      const TestBadge = (props: any) => {\n        renderSpy()\n        return <Badge {...props}>Performance Badge</Badge>\n      }\n      \n      const { rerender } = render(<TestBadge />)\n      \n      expect(renderSpy).toHaveBeenCalledTimes(1)\n      \n      // Re-render with same props\n      rerender(<TestBadge />)\n      \n      expect(renderSpy).toHaveBeenCalledTimes(2)\n    })\n  })\n  \n  describe('Edge Cases', () => {\n    test('handles undefined children', () => {\n      render(<Badge>{undefined}</Badge>)\n      \n      const badge = document.querySelector('.inline-flex')\n      expect(badge).toBeInTheDocument()\n    })\n    \n    test('handles null children', () => {\n      render(<Badge>{null}</Badge>)\n      \n      const badge = document.querySelector('.inline-flex')\n      expect(badge).toBeInTheDocument()\n    })\n    \n    test('handles boolean children', () => {\n      render(<Badge>{true}</Badge>)\n      \n      const badge = document.querySelector('.inline-flex')\n      expect(badge).toBeInTheDocument()\n    })\n    \n    test('handles zero as content', () => {\n      render(<Badge>{0}</Badge>)\n      \n      expect(screen.getByText('0')).toBeInTheDocument()\n    })\n  })\n})"