/**\n * Accessibility Compliance Tests\n * Tests WCAG compliance across all enhanced components and themes\n */\n\nimport React from 'react'\nimport { render, screen } from '@testing-library/react'\nimport userEvent from '@testing-library/user-event'\nimport {\n  renderWithA11yTest,\n  testThemeColorContrast,\n  colorContrast,\n  keyboardNavigation,\n  screenReader,\n  focusManagement,\n  themeColorPairs\n} from '../../../test-utils/accessibility'\nimport { Button } from '../button'\nimport { Card, CardHeader, CardTitle, CardContent, CardFooter } from '../card'\nimport { Input } from '../input'\nimport { Alert, AlertTitle, AlertDescription } from '../alert'\nimport { Badge } from '../badge'\nimport { Settings, AlertTriangle, Info } from 'lucide-react'\n\ndescribe('Accessibility Compliance Tests', () => {\n  describe('Color Contrast Compliance', () => {\n    test('all theme color pairs meet WCAG AA standards', () => {\n      Object.keys(themeColorPairs).forEach(themeName => {\n        const results = testThemeColorContrast(themeName as keyof typeof themeColorPairs)\n        \n        results.forEach(({ pair, ratio, meetsAA }) => {\n          expect(meetsAA).toBe(true)\n          expect(ratio).toBeGreaterThanOrEqual(4.5)\n        })\n      })\n    })\n    \n    test('base theme primary/primary-content has sufficient contrast', () => {\n      const ratio = colorContrast.getContrastRatio('#2563eb', '#ffffff')\n      expect(ratio).toBeGreaterThanOrEqual(4.5)\n      expect(colorContrast.meetsWCAGAA('#2563eb', '#ffffff')).toBe(true)\n    })\n    \n    test('dark theme colors have sufficient contrast', () => {\n      const ratio = colorContrast.getContrastRatio('#1f2937', '#f9fafb')\n      expect(ratio).toBeGreaterThanOrEqual(4.5)\n      expect(colorContrast.meetsWCAGAA('#1f2937', '#f9fafb')).toBe(true)\n    })\n    \n    test('error colors meet accessibility standards', () => {\n      const ratio = colorContrast.getContrastRatio('#ef4444', '#ffffff')\n      expect(ratio).toBeGreaterThanOrEqual(4.5)\n      expect(colorContrast.meetsWCAGAA('#ef4444', '#ffffff')).toBe(true)\n    })\n    \n    test('success colors meet accessibility standards', () => {\n      const ratio = colorContrast.getContrastRatio('#22c55e', '#ffffff')\n      expect(ratio).toBeGreaterThanOrEqual(4.5)\n      expect(colorContrast.meetsWCAGAA('#22c55e', '#ffffff')).toBe(true)\n    })\n  })\n  \n  describe('Button Accessibility', () => {\n    test('button has no accessibility violations', async () => {\n      await renderWithA11yTest(\n        <Button>Accessible Button</Button>\n      )\n    })\n    \n    test('button with icon has proper aria-label', async () => {\n      await renderWithA11yTest(\n        <Button size=\"icon\" aria-label=\"Settings\">\n          <Settings className=\"h-4 w-4\" />\n        </Button>\n      )\n      \n      const button = screen.getByLabelText('Settings')\n      expect(button).toBeInTheDocument()\n    })\n    \n    test('disabled button is not focusable', async () => {\n      render(<Button disabled>Disabled Button</Button>)\n      \n      const button = screen.getByRole('button')\n      expect(button).toBeDisabled()\n      expect(button).toHaveAttribute('tabindex', '-1')\n    })\n    \n    test('button supports keyboard activation', async () => {\n      const handleClick = jest.fn()\n      const user = userEvent.setup()\n      \n      render(<Button onClick={handleClick}>Keyboard Button</Button>)\n      \n      const button = screen.getByRole('button')\n      button.focus()\n      \n      await user.keyboard('{Enter}')\n      expect(handleClick).toHaveBeenCalled()\n      \n      await user.keyboard(' ')\n      expect(handleClick).toHaveBeenCalledTimes(2)\n    })\n    \n    test('button has visible focus indicator', () => {\n      render(<Button>Focus Button</Button>)\n      \n      const button = screen.getByRole('button')\n      expect(button).toHaveClass('focus-visible:ring-2')\n      expect(button).toHaveClass('focus-visible:ring-[var(--color-primary)]')\n    })\n  })\n  \n  describe('Card Accessibility', () => {\n    test('card has no accessibility violations', async () => {\n      await renderWithA11yTest(\n        <Card>\n          <CardHeader>\n            <CardTitle>Accessible Card</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <p>Card content</p>\n          </CardContent>\n        </Card>\n      )\n    })\n    \n    test('card title uses proper heading semantics', () => {\n      render(\n        <Card>\n          <CardHeader>\n            <CardTitle>Card Heading</CardTitle>\n          </CardHeader>\n        </Card>\n      )\n      \n      const title = screen.getByText('Card Heading')\n      expect(title.tagName).toBe('H3')\n    })\n    \n    test('focusable card has proper focus management', () => {\n      render(\n        <Card tabIndex={0} aria-label=\"Interactive card\">\n          <CardContent>Focusable content</CardContent>\n        </Card>\n      )\n      \n      const card = screen.getByLabelText('Interactive card')\n      card.focus()\n      expect(card).toHaveFocus()\n    })\n  })\n  \n  describe('Input Accessibility', () => {\n    test('input has no accessibility violations', async () => {\n      await renderWithA11yTest(\n        <Input aria-label=\"Accessible input\" placeholder=\"Enter text\" />\n      )\n    })\n    \n    test('input with label has proper association', async () => {\n      await renderWithA11yTest(\n        <div>\n          <label htmlFor=\"test-input\">Input Label</label>\n          <Input id=\"test-input\" />\n        </div>\n      )\n      \n      const input = screen.getByLabelText('Input Label')\n      expect(input).toBeInTheDocument()\n    })\n    \n    test('required input has proper aria attributes', () => {\n      render(\n        <Input \n          required \n          aria-label=\"Required input\"\n          aria-describedby=\"input-description\"\n        />\n      )\n      \n      const input = screen.getByLabelText('Required input')\n      expect(input).toHaveAttribute('required')\n      expect(input).toHaveAttribute('aria-describedby', 'input-description')\n    })\n    \n    test('invalid input has proper error indication', () => {\n      render(\n        <Input \n          aria-invalid\n          aria-label=\"Invalid input\"\n          aria-describedby=\"error-message\"\n        />\n      )\n      \n      const input = screen.getByLabelText('Invalid input')\n      expect(input).toHaveAttribute('aria-invalid', 'true')\n      expect(input).toHaveAttribute('aria-describedby', 'error-message')\n    })\n  })\n  \n  describe('Alert Accessibility', () => {\n    test('alert has no accessibility violations', async () => {\n      await renderWithA11yTest(\n        <Alert>\n          <AlertTriangle className=\"h-4 w-4\" />\n          <AlertTitle>Alert Title</AlertTitle>\n          <AlertDescription>Alert description</AlertDescription>\n        </Alert>\n      )\n    })\n    \n    test('alert has proper role', () => {\n      render(\n        <Alert>\n          <AlertDescription>Alert message</AlertDescription>\n        </Alert>\n      )\n      \n      const alert = screen.getByRole('alert')\n      expect(alert).toBeInTheDocument()\n    })\n    \n    test('alert title uses proper heading semantics', () => {\n      render(\n        <Alert>\n          <AlertTitle>Alert Heading</AlertTitle>\n        </Alert>\n      )\n      \n      const title = screen.getByText('Alert Heading')\n      expect(title.tagName).toBe('H5')\n    })\n    \n    test('alert with custom aria-label', () => {\n      render(\n        <Alert aria-label=\"Custom alert\">\n          <AlertDescription>Custom alert message</AlertDescription>\n        </Alert>\n      )\n      \n      const alert = screen.getByLabelText('Custom alert')\n      expect(alert).toBeInTheDocument()\n    })\n  })\n  \n  describe('Badge Accessibility', () => {\n    test('badge has no accessibility violations', async () => {\n      await renderWithA11yTest(\n        <Badge>Accessible Badge</Badge>\n      )\n    })\n    \n    test('badge with status role', () => {\n      render(<Badge role=\"status\">Status Badge</Badge>)\n      \n      const badge = screen.getByRole('status')\n      expect(badge).toBeInTheDocument()\n    })\n    \n    test('interactive badge has proper accessibility', async () => {\n      const handleClick = jest.fn()\n      const user = userEvent.setup()\n      \n      render(\n        <Badge \n          tabIndex={0}\n          role=\"button\"\n          aria-label=\"Interactive badge\"\n          onClick={handleClick}\n          onKeyDown={(e) => {\n            if (e.key === 'Enter' || e.key === ' ') {\n              handleClick()\n            }\n          }}\n        >\n          Click me\n        </Badge>\n      )\n      \n      const badge = screen.getByLabelText('Interactive badge')\n      badge.focus()\n      \n      await user.keyboard('{Enter}')\n      expect(handleClick).toHaveBeenCalled()\n    })\n  })\n  \n  describe('Keyboard Navigation', () => {\n    test('tab navigation works through interactive elements', async () => {\n      render(\n        <div>\n          <Button>Button 1</Button>\n          <Input placeholder=\"Input field\" />\n          <Button>Button 2</Button>\n        </div>\n      )\n      \n      const button1 = screen.getByText('Button 1')\n      const input = screen.getByPlaceholderText('Input field')\n      const button2 = screen.getByText('Button 2')\n      \n      await keyboardNavigation.testTabNavigation([button1, input, button2])\n    })\n    \n    test('escape key handling in interactive components', async () => {\n      const handleEscape = jest.fn()\n      \n      render(\n        <div \n          onKeyDown={(e) => {\n            if (e.key === 'Escape') {\n              handleEscape()\n            }\n          }}\n        >\n          <Button>Escapable Button</Button>\n        </div>\n      )\n      \n      const button = screen.getByText('Escapable Button')\n      await keyboardNavigation.testEscapeKey(button, handleEscape)\n    })\n  })\n  \n  describe('Screen Reader Compatibility', () => {\n    test('interactive elements have accessible names', () => {\n      render(\n        <div>\n          <Button aria-label=\"Save document\">💾</Button>\n          <Button>Cancel</Button>\n          <Input aria-label=\"Search query\" />\n          <Badge role=\"status\" aria-label=\"5 notifications\">5</Badge>\n        </div>\n      )\n      \n      const saveButton = screen.getByLabelText('Save document')\n      const cancelButton = screen.getByText('Cancel')\n      const searchInput = screen.getByLabelText('Search query')\n      const notificationBadge = screen.getByLabelText('5 notifications')\n      \n      screenReader.testAriaLabels(saveButton)\n      screenReader.testAriaLabels(cancelButton)\n      screenReader.testAriaLabels(searchInput)\n      screenReader.testAriaLabels(notificationBadge)\n    })\n    \n    test('semantic markup is properly structured', () => {\n      render(\n        <Card role=\"region\" aria-labelledby=\"card-title\">\n          <CardHeader>\n            <CardTitle id=\"card-title\">Semantic Card</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <p>Card content with proper semantics</p>\n          </CardContent>\n        </Card>\n      )\n      \n      const card = screen.getByRole('region')\n      const title = screen.getByText('Semantic Card')\n      \n      screenReader.testSemanticMarkup(card, 'region')\n      screenReader.testSemanticMarkup(title)\n    })\n  })\n  \n  describe('Focus Management', () => {\n    test('focus indicators are visible', () => {\n      render(\n        <div>\n          <Button>Focusable Button</Button>\n          <Input placeholder=\"Focusable Input\" />\n        </div>\n      )\n      \n      const button = screen.getByText('Focusable Button')\n      const input = screen.getByPlaceholderText('Focusable Input')\n      \n      // Check for focus ring classes\n      expect(button).toHaveClass('focus-visible:ring-2')\n      expect(input).toHaveClass('focus-visible:ring-2')\n    })\n    \n    test('disabled elements are not focusable', () => {\n      render(\n        <div>\n          <Button disabled>Disabled Button</Button>\n          <Input disabled placeholder=\"Disabled Input\" />\n        </div>\n      )\n      \n      const button = screen.getByText('Disabled Button')\n      const input = screen.getByPlaceholderText('Disabled Input')\n      \n      expect(button).toBeDisabled()\n      expect(input).toBeDisabled()\n      expect(button).toHaveAttribute('tabindex', '-1')\n    })\n  })\n  \n  describe('Theme-Specific Accessibility', () => {\n    test('light theme maintains accessibility', async () => {\n      await renderWithA11yTest(\n        <div className=\"theme-base\">\n          <Button>Light Theme Button</Button>\n          <Alert>\n            <AlertDescription>Light theme alert</AlertDescription>\n          </Alert>\n        </div>,\n        { testContrast: true, theme: 'base' }\n      )\n    })\n    \n    test('dark theme maintains accessibility', async () => {\n      await renderWithA11yTest(\n        <div className=\"theme-midnight-purple\">\n          <Button>Dark Theme Button</Button>\n          <Alert>\n            <AlertDescription>Dark theme alert</AlertDescription>\n          </Alert>\n        </div>,\n        { testContrast: true, theme: 'midnight-purple' }\n      )\n    })\n  })\n  \n  describe('Complex Component Accessibility', () => {\n    test('complete form has proper accessibility', async () => {\n      await renderWithA11yTest(\n        <form>\n          <div>\n            <label htmlFor=\"name-input\">Name</label>\n            <Input id=\"name-input\" required aria-describedby=\"name-help\" />\n            <div id=\"name-help\">Enter your full name</div>\n          </div>\n          \n          <div>\n            <label htmlFor=\"email-input\">Email</label>\n            <Input id=\"email-input\" type=\"email\" required />\n          </div>\n          \n          <div>\n            <Button type=\"submit\">Submit Form</Button>\n            <Button type=\"button\" variant=\"outline\">Cancel</Button>\n          </div>\n        </form>\n      )\n    })\n    \n    test('card with interactive elements', async () => {\n      await renderWithA11yTest(\n        <Card>\n          <CardHeader>\n            <CardTitle>Interactive Card</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <p>This card has interactive elements</p>\n            <Input placeholder=\"Card input\" />\n          </CardContent>\n          <CardFooter>\n            <Button>Primary Action</Button>\n            <Button variant=\"outline\">Secondary Action</Button>\n          </CardFooter>\n        </Card>\n      )\n    })\n  })\n})"