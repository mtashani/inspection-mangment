/**\n * Theme Decorator for Storybook\n * Provides theme switching functionality in Storybook stories\n */\n\nimport React, { useEffect } from 'react'\nimport type { Decorator } from '@storybook/react'\nimport { EnhancedThemeProvider } from '../../src/design-system/providers/enhanced-theme-provider'\n\n/**\n * Theme Decorator\n * Wraps stories with theme provider and applies theme/variant combinations\n */\nexport const ThemeDecorator: Decorator = (Story, context) => {\n  const { globals } = context\n  const theme = globals.theme || 'base'\n  const variant = globals.variant || 'none'\n  \n  useEffect(() => {\n    // Apply theme class to document body\n    const body = document.body\n    \n    // Remove existing theme classes\n    body.classList.remove(\n      'theme-base',\n      'theme-cool-blue', \n      'theme-warm-sand',\n      'theme-midnight-purple',\n      'theme-soft-gray',\n      'theme-warm-cream'\n    )\n    \n    // Remove existing variant classes\n    body.classList.remove(\n      'variant-rounded',\n      'variant-sharp',\n      'variant-compact',\n      'variant-spacious',\n      'variant-minimal',\n      'variant-rich'\n    )\n    \n    // Apply new theme class\n    body.classList.add(`theme-${theme}`)\n    \n    // Apply variant class if not 'none'\n    if (variant !== 'none') {\n      body.classList.add(`variant-${variant}`)\n    }\n    \n    // Update CSS custom properties for immediate effect\n    updateCSSVariables(theme, variant)\n  }, [theme, variant])\n  \n  return (\n    <EnhancedThemeProvider initialTheme={theme}>\n      <div className=\"min-h-screen bg-[var(--color-base-100)] text-[var(--color-base-content)] p-4\">\n        <Story />\n      </div>\n    </EnhancedThemeProvider>\n  )\n}\n\n/**\n * Update CSS variables based on theme and variant\n */\nfunction updateCSSVariables(theme: string, variant: string) {\n  const root = document.documentElement\n  \n  // Base theme colors\n  const themeColors = {\n    base: {\n      primary: '#2563eb',\n      secondary: '#64748b',\n      accent: '#f59e0b',\n      success: '#22c55e',\n      warning: '#f59e0b',\n      error: '#ef4444',\n      info: '#3b82f6',\n      'base-100': '#ffffff',\n      'base-200': '#f1f5f9',\n      'base-300': '#e2e8f0',\n      'base-content': '#0f172a'\n    },\n    'cool-blue': {\n      primary: '#3b82f6',\n      secondary: '#6b7280',\n      accent: '#06b6d4',\n      success: '#10b981',\n      warning: '#f59e0b',\n      error: '#ef4444',\n      info: '#3b82f6',\n      'base-100': '#f8fafc',\n      'base-200': '#f1f5f9',\n      'base-300': '#e2e8f0',\n      'base-content': '#1e293b'\n    },\n    'warm-sand': {\n      primary: '#d97706',\n      secondary: '#92400e',\n      accent: '#f59e0b',\n      success: '#059669',\n      warning: '#d97706',\n      error: '#dc2626',\n      info: '#0284c7',\n      'base-100': '#fefcf3',\n      'base-200': '#fef3c7',\n      'base-300': '#fde68a',\n      'base-content': '#451a03'\n    },\n    'midnight-purple': {\n      primary: '#a78bfa',\n      secondary: '#6b7280',\n      accent: '#f472b6',\n      success: '#34d399',\n      warning: '#fbbf24',\n      error: '#f87171',\n      info: '#60a5fa',\n      'base-100': '#1f2937',\n      'base-200': '#374151',\n      'base-300': '#4b5563',\n      'base-content': '#f9fafb'\n    },\n    'soft-gray': {\n      primary: '#6366f1',\n      secondary: '#64748b',\n      accent: '#8b5cf6',\n      success: '#10b981',\n      warning: '#f59e0b',\n      error: '#ef4444',\n      info: '#3b82f6',\n      'base-100': '#fafafa',\n      'base-200': '#f4f4f5',\n      'base-300': '#e4e4e7',\n      'base-content': '#18181b'\n    },\n    'warm-cream': {\n      primary: '#f59e0b',\n      secondary: '#78716c',\n      accent: '#f97316',\n      success: '#059669',\n      warning: '#d97706',\n      error: '#dc2626',\n      info: '#0284c7',\n      'base-100': '#fefdf8',\n      'base-200': '#fef7ed',\n      'base-300': '#fed7aa',\n      'base-content': '#431407'\n    }\n  }\n  \n  // Apply theme colors\n  const colors = themeColors[theme as keyof typeof themeColors] || themeColors.base\n  \n  Object.entries(colors).forEach(([key, value]) => {\n    root.style.setProperty(`--color-${key}`, value)\n    // Also set content colors\n    if (key.includes('primary') || key.includes('secondary') || key.includes('accent')) {\n      root.style.setProperty(`--color-${key}-content`, '#ffffff')\n    }\n  })\n  \n  // Apply variant modifications\n  const variantModifications = {\n    rounded: {\n      'radius-field': '0.5rem',\n      'radius-box': '0.75rem',\n      'radius-selector': '0.375rem'\n    },\n    sharp: {\n      'radius-field': '0rem',\n      'radius-box': '0rem', \n      'radius-selector': '0rem'\n    },\n    compact: {\n      'size-field': '2rem',\n      'size-selector': '1.25rem',\n      'space-4': '0.75rem'\n    },\n    spacious: {\n      'size-field': '3rem',\n      'size-selector': '2rem',\n      'space-4': '1.5rem'\n    },\n    minimal: {\n      'depth': '0 1px 2px 0 rgba(0, 0, 0, 0.05)',\n      'border-width': '1px'\n    },\n    rich: {\n      'depth': '0 10px 15px -3px rgba(0, 0, 0, 0.1)',\n      'border-width': '2px'\n    }\n  }\n  \n  if (variant !== 'none' && variantModifications[variant as keyof typeof variantModifications]) {\n    const modifications = variantModifications[variant as keyof typeof variantModifications]\n    Object.entries(modifications).forEach(([key, value]) => {\n      root.style.setProperty(`--${key}`, value)\n    })\n  } else {\n    // Reset to defaults\n    root.style.setProperty('--radius-field', '0.25rem')\n    root.style.setProperty('--radius-box', '0.5rem')\n    root.style.setProperty('--radius-selector', '0.125rem')\n    root.style.setProperty('--size-field', '2.5rem')\n    root.style.setProperty('--size-selector', '1.5rem')\n    root.style.setProperty('--space-4', '1rem')\n    root.style.setProperty('--depth', '0 4px 6px -1px rgba(0, 0, 0, 0.1)')\n    root.style.setProperty('--border-width', '1px')\n  }\n}"